package main

/**
protobuf 与 rpc:
  Protobuf 核心工具集是C++语言开发的, 在官方的 protoc 编译器中并不支持 Go 语言. 要想基于`.proto`
文件生成相应的 Go 语言代码, 需要安装相应的插件.

  首先安装官方的 protoc 工具. 可以从 https://github.com/google/protobuf/releases 下载. 然后
是安装针对 Go 语言的代码生成插件. 可以通过 go get github.com/golang/protobuf/protoc-gen-go 安
装.

  生成 Go 代码: protoc --go_out=. hello.proto
  其中 go_out 参数告知 protoc 编译器去加载对应的 protoc-gen-go 工具, 然后通过该工具生成代码, 生成
代码的目录放在当前目录.

RPC格式介绍:

  SayHello(request Request, reponse *Response) error

  生成的方法是围绕 Request 和 Response 类型展开的. Request是 RPC 请求的参数, Response 是 RPC 的
返回相应. 其中 Request 和 Response 的 ProtoMessage 方法表示这是一个实现了 proto.Message 接口的方
法.


 在 protoc-gen-go 内部已经集成了一个名为grpc的插件, 可以针对 gRPC 生成代码:
 protoc --go_out=plugins=grpc:.  hello.proto

 在生成的代码中增加 XxxServer 和 XxxClient 的新类型. 这些类型是为 gRPC 服务的.
**/
/**
定制代码生成插件:
  Protobuf 的 protoc 编码器是通过插件机制实现对不同语言的支持. 比如 protoc 命令出现 --xxx_out 格
式的参数, 那么 protoc 将首先查询是否有内置的xxx插件, 如果没有内置的xxx插件, 那么将继续查询当前系统中
是否存在 protoc-gen-xxx 命名的可执行程序, 最终通常查询到的插件生成代码.
  对于 Go 语言而言的 protoc-gen-go 插件来说, 里面又实现了一层静态插件系统. 比如 protoc-gen-go 内
置了一个 gRPC 插件, 用户可通过 --go_out=plugins=grpc 参数来生成 gRPC 相关代码, 否则只会针对 message
生成相关的代码.

  参考 gRPC 插件的代码, 可以发现 generator.RegisterPlugin 函数可以用来注册插件. 插件是一个
generator.Plugin 接口:
  代码位置: github.com/golang/protobuf/protoc-gen-go/grpc/grpc.go

// A Plugin provides functionality to add to the output during
// Go code generation, such as to produce RPC stubs.
type Plugin interface {
	// Name identifies the plugin.
	Name() string

	// Init is called once after data structures are built but before
	// code generation begins.
	Init(g *Generator)

	// Generate produces the code generated by the plugin for this file,
	// except for the imports, by calling the generator's methods P, In, and Out.
	Generate(file *FileDescriptor)

	// GenerateImports produces the import declarations for this file.
	// It is called after Generate.
	GenerateImports(file *FileDescriptor)
}

其中 Name() 返回插件的名字, 这是 Go 语言的 Protobuf 实现的插件体系, 和 protoc 插件的名字没有关系.
Init() 是通过 g 参数对插件进行初始化, g 参数中包含 proto 文件的所有信息. 最后 Generate() 和
GenerateImports() 用于生成主体代码和对应的导入包代码.

**/

